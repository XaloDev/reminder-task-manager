[{"E:\\dev\\reminder-task-manager\\src\\index.js":"1","E:\\dev\\reminder-task-manager\\src\\App.js":"2","E:\\dev\\reminder-task-manager\\src\\store\\index.js":"3","E:\\dev\\reminder-task-manager\\src\\view\\login\\index.js":"4","E:\\dev\\reminder-task-manager\\src\\view\\home\\index.js":"5","E:\\dev\\reminder-task-manager\\src\\view\\usuario-novo\\index.js":"6","E:\\dev\\reminder-task-manager\\src\\view\\usuario-recuperar-senha\\index.js":"7","E:\\dev\\reminder-task-manager\\src\\store\\usuarioReducer.js":"8","E:\\dev\\reminder-task-manager\\src\\config\\firebase.js":"9","E:\\dev\\reminder-task-manager\\src\\components\\navbar\\index.js":"10","E:\\dev\\reminder-task-manager\\src\\components\\card\\index.js":"11","E:\\dev\\reminder-task-manager\\src\\components\\atividades\\index.js":"12"},{"size":234,"mtime":1640226587759,"results":"13","hashOfConfig":"14"},{"size":990,"mtime":1640226587754,"results":"15","hashOfConfig":"14"},{"size":457,"mtime":1640226587760,"results":"16","hashOfConfig":"14"},{"size":2776,"mtime":1640226587762,"results":"17","hashOfConfig":"14"},{"size":4579,"mtime":1640226587761,"results":"18","hashOfConfig":"14"},{"size":3268,"mtime":1640226587763,"results":"19","hashOfConfig":"14"},{"size":1615,"mtime":1640226587764,"results":"20","hashOfConfig":"14"},{"size":451,"mtime":1640226587760,"results":"21","hashOfConfig":"14"},{"size":431,"mtime":1640226587758,"results":"22","hashOfConfig":"14"},{"size":2321,"mtime":1640226587757,"results":"23","hashOfConfig":"14"},{"size":8574,"mtime":1640226587757,"results":"24","hashOfConfig":"14"},{"size":4069,"mtime":1640226587756,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"p0glho",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},"E:\\dev\\reminder-task-manager\\src\\index.js",[],["55","56"],"E:\\dev\\reminder-task-manager\\src\\App.js",[],"E:\\dev\\reminder-task-manager\\src\\store\\index.js",[],"E:\\dev\\reminder-task-manager\\src\\view\\login\\index.js",[],"E:\\dev\\reminder-task-manager\\src\\view\\home\\index.js",["57","58"],"import React, { useState, useEffect } from 'react';\r\nimport './home.css';\r\nimport Navbar from '../../components/navbar';\r\nimport firebase from '../../config/firebase';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nimport Card from '../../components/card';\r\nimport {useSelector} from 'react-redux';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction Home(){\r\n    \r\n    \r\n    \r\n    const [grupos, setGrupos] = useState([]);\r\n    let listagrupos = [];\r\n    const [controle, setControle] = useState(1);\r\n    const [grupoNome, setGrupoNome] = useState();\r\n    const [faseBotao, setFaseBotao] = useState();\r\n    const usuarioEmail = useSelector(state => state.usuarioEmail);\r\n    const db = firebase.firestore();\r\n    const [passarAtividade, setPassarAtividade] = useState(1);\r\n    const [dropZoneQueVouUsar, setDropZoneQueVouUsar] = useState();\r\n    \r\n\r\n    useEffect(() => {\r\n        firebase.firestore().collection('grupos').where(\"usuario\", \"==\", usuarioEmail).get().then(async (resultado) => {\r\n            await resultado.docs.forEach(doc => {\r\n                listagrupos.push({\r\n                    id: doc.id,\r\n                    ...doc.data()\r\n                })\r\n                \r\n            })\r\n            \r\n            listagrupos.sort(function(a, b) {\r\n                return parseFloat(a.data) - parseFloat(b.data);\r\n            })\r\n            setGrupos(listagrupos)\r\n            \r\n            \r\n        })\r\n    }, [controle])\r\n\r\n    \r\n\r\n    function mudarFase(){\r\n        setFaseBotao(1);\r\n        setGrupoNome('')\r\n    }\r\n    \r\n    function criarGrupo(){\r\n        if(grupoNome != ''){\r\n        db.collection('grupos').add({\r\n            usuario: usuarioEmail,\r\n            grupoNome: grupoNome,\r\n            data: Date.now()\r\n            \r\n        }).then(()=> {\r\n            setFaseBotao(0);\r\n            setTimeout(() => {\r\n                mudarControle()\r\n            }, 500);\r\n        }).catch(erro =>{\r\n            setFaseBotao(0);\r\n        })\r\n    }else{\r\n        setFaseBotao(0)\r\n    }\r\n    }\r\n        \r\n    const handleKeyDown = (event) => {\r\n        if (event.keyCode === 13) {\r\n          event.preventDefault();\r\n          setFaseBotao(0);\r\n          criarGrupo()\r\n          mudarControle()\r\n          setTimeout(() => {\r\n              mudarControleAtividade()\r\n          }, 500);\r\n          \r\n        }\r\n      };\r\n\r\n     const mudarControle = function(){\r\n        if (controle === 0){\r\n            setControle(1)\r\n        }else{\r\n            setControle(0)\r\n        }\r\n    }\r\n\r\n    const mudarControleAtividade = function(){\r\n        if (passarAtividade === 0){\r\n            setPassarAtividade(1)\r\n        }else{\r\n            setPassarAtividade(0)\r\n        }\r\n    }\r\n    \r\n    \r\n    function mudarFase0(){\r\n        setFaseBotao(0);\r\n        setGrupoNome('')\r\n    }\r\n   \r\n    \r\n\r\n    return(\r\n        <>\r\n            \r\n            \r\n            <div className=\"tela-home\">\r\n            <Navbar/>\r\n            { useSelector(state => state.usuarioLogado) > 0 ?  null : <Redirect to='/' /> }\r\n                <div className=\"col-12\">\r\n                    <div className='row'> \r\n                        {grupos.map(item => <Card dropZoneQueVouUsar={dropZoneQueVouUsar} setDropZoneQueVouUsar={setDropZoneQueVouUsar} id={item.id} grupoNome={item.grupoNome} atualizarGrupo={mudarControle} controle={controle} controleAtividade={passarAtividade}/>)}\r\n                        <div className=\"col-md-3 col-sm-4 col-xs-12\">\r\n                            <div className=\"card-body\">\r\n                            {\r\n                                faseBotao > 0 ?\r\n                            <>\r\n                                \r\n                                <input onBlur={mudarFase0} id='grupo' onKeyDown={(e) => handleKeyDown(e)} onChange={(e) => setGrupoNome(e.target.value)} className=\"py-2 col-12\" type=\"text\" placeholder=\"Nome do Grupo\" autoFocus/>   \r\n                            \r\n                            </>\r\n                            :\r\n                            <>\r\n                                <button  onClick={mudarFase} className=\"btn btn-lg btn-block btn-grupo py-3\" type=\"button\">Novo grupo <i className=\"fas fa-plus\"></i></button>\r\n                                \r\n                            </>\r\n                            }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <footer className='text-white text-center mt-5'>XaloDev<br></br>\r\n                Copyright Â© 2021\r\n                </footer>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home;","E:\\dev\\reminder-task-manager\\src\\view\\usuario-novo\\index.js",[],"E:\\dev\\reminder-task-manager\\src\\view\\usuario-recuperar-senha\\index.js",[],"E:\\dev\\reminder-task-manager\\src\\store\\usuarioReducer.js",[],"E:\\dev\\reminder-task-manager\\src\\config\\firebase.js",[],"E:\\dev\\reminder-task-manager\\src\\components\\navbar\\index.js",["59","60"],"import React, {useState} from 'react';\r\nimport './navbar.css';\r\nimport {Link} from 'react-router-dom';\r\nimport { useSelector, useDispatch} from 'react-redux';\r\nimport usuarioReducer from '../../store/usuarioReducer';\r\n\r\n\r\nfunction Navbar(){\r\n\r\n\r\n    const dispatch = useDispatch();\r\n    const usuarioEmail = useSelector(state => state.usuarioEmail);\r\n\r\n    return(\r\n        \r\n        <nav className=\"navbar navbar-expand-lg col-12\">\r\n            <i className=\"fab fa-xing text-white fa-3x ml-2 mr-3\"></i>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <i class=\"fas fa-bars text-white\"></i>                \r\n                </button>\r\n\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        \r\n                    \r\n                        {\r\n                            useSelector(state => state.usuarioLogado) > 0 ?\r\n                        \r\n                            <>\r\n                                <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/home\">InÃ­cio </Link></li>\r\n                                <li className=\"nav-item\"><Link className=\"nav-link\" onClick={() => dispatch({type: 'LOG_OUT'})}>Sair</Link></li>\r\n                                <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/home\">VocÃª estÃ¡ logado com: {usuarioEmail} </Link></li>\r\n                              \r\n                            </>\r\n                            :\r\n                            <>\r\n                            <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/\">Login </Link></li>\r\n                            <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/novousuario\">Cadastro </Link></li>\r\n                            <li className=\"nav-item\"><Link className=\"nav-link\" to=\"/recuperarsenha\">Esqueceu a senha?</Link></li>\r\n                            \r\n                                \r\n                            </>\r\n\r\n                         } \r\n\r\n\r\n                    </ul>   \r\n                </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","E:\\dev\\reminder-task-manager\\src\\components\\card\\index.js",["61","62","63","64","65","66","67"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport Atividades from '../atividades';\r\nimport './card.css';\r\nimport firebase from 'firebase';\r\nimport Popup from 'reactjs-popup';\r\n\r\n\r\nfunction Card({grupoNome, id, atualizarGrupo, controle, controleAtividade, dropZoneQueVouUsar, setDropZoneQueVouUsar}){\r\n\r\n    const [faseBotao, setFaseBotao] = useState();\r\n    const [faseNome, setFaseNome] = useState();\r\n    const [nomeDaAtividadeDragged, setNomeDaAtividadeDragged] = useState();\r\n    \r\n    const [nome, setNome] = useState('');\r\n    const [atividadeNome, setAtividadeNome] = useState('');\r\n    let listaatividades = [];  // \r\n    const [atividades, setAtividades] = useState([]);\r\n    const [controleAtividades, setControleAtividades] = useState(1);\r\n    const ref = useRef();\r\n    const refDeletar = useRef();\r\n    const refDropZone = useRef();\r\n    const closeTooltip = () => ref.current.close();\r\n    const openTooltip = function (){\r\n        ref.current.open()\r\n        on()\r\n    }\r\n    const [currentDropZone, setCurrentDropZone] = useState();\r\n\r\n\r\n    const confirmarCloseAbrir = () => refDeletar.current.open();\r\n    const confirmarClose = () => refDeletar.current.close();\r\n\r\n   \r\n\r\n    const db = firebase.firestore();\r\n\r\n    var DropZoneAtual = document.querySelector('.overcustom')\r\n    \r\n\r\n    function criarAtividade (){\r\n        closeTooltip()\r\n        if (atividadeNome != ''){\r\n        db.collection('grupos').doc(id).collection('atividades').add({\r\n            atividadeNome: atividadeNome,\r\n            data: Date.now()\r\n        }).then(()=> {\r\n            setTimeout(() => {\r\n                mudarControleAtividades()\r\n                atualizarGrupo()\r\n                \r\n                setAtividadeNome('')\r\n               \r\n                \r\n            }, 300);\r\n            \r\n        }).catch(erro =>{\r\n            setAtividadeNome('')\r\n        })\r\n    }else{\r\n        setAtividadeNome('')\r\n        \r\n    }\r\n        \r\n     }\r\n\r\n     useEffect(() => {\r\n        firebase.firestore().collection('grupos').doc(id).collection('atividades').orderBy('data').get().then(async (resultado) => {\r\n            await resultado.docs.forEach(doc => {\r\n                listaatividades.push({\r\n                    id: doc.id,\r\n                    ...doc.data()\r\n                })\r\n            })\r\n            setAtividades(listaatividades)\r\n        })\r\n    }, [controleAtividades, controleAtividade, controle])\r\n    \r\n    \r\n\r\n    function mudarFase(){\r\n        setFaseBotao(1)\r\n        setFaseNome(0)\r\n    }\r\n\r\n    function mudarFaseNome(){\r\n        \r\n        setFaseNome(1)\r\n        setFaseBotao(0)\r\n        \r\n    }\r\n    function deletarGrupo(){\r\n        firebase.firestore().collection('grupos').doc(id).delete().then(() =>{\r\n            atualizarGrupo()\r\n            confirmarClose()\r\n            off()\r\n        })\r\n    }\r\n\r\n    const atividadeEnter = (event) => {\r\n        if (event.keyCode === 13) {\r\n          event.preventDefault();\r\n          confirmarClose()\r\n          criarAtividade()\r\n          \r\n          \r\n        }\r\n      };\r\n\r\n   \r\n    const handleKeyDown = (event) => {\r\n        if (event.keyCode === 13) {\r\n          event.preventDefault();\r\n          setFaseNome(0)\r\n          if(nome == '' || nome == undefined){\r\n            atualizarGrupo()\r\n            setNome('')\r\n          }else{\r\n            setTimeout(() => {\r\n                atualizarGrupo()\r\n                  editarNome()\r\n                  setNome('')\r\n            }, 500);\r\n        }\r\n        }\r\n      };\r\n      \r\n      \r\n     \r\n     function editarNome(){\r\n         firebase.firestore().collection('grupos').doc(id).update({\r\n             grupoNome : nome\r\n         })\r\n\r\n     }\r\n\r\n     const mudarControleAtividades = function(){\r\n        if (controleAtividades === 0){\r\n            setControleAtividades(1)\r\n        }else{\r\n            setControleAtividades(0)\r\n        }\r\n    }\r\n\r\n    function mudarFaseNome0 (){\r\n        setFaseNome(0)\r\n        setNome('')\r\n    }\r\n    function on() {\r\n        document.getElementById(\"overlay\").style.display = \"block\";\r\n      }\r\n      \r\n      function off() {\r\n        document.getElementById(\"overlay\").style.display = \"none\";\r\n      }\r\n\r\n      \r\n      const dropzones = document.querySelectorAll('.dropzone')\r\n\r\n      function dragenter(){\r\n        \r\n        \r\n      }\r\n      function dragover(){\r\n        \r\n        refDropZone.current.classList.add('overcustom')\r\n        const cardBeingDragged = document.querySelector('.is-dragging')\r\n        var dropzonequevouusar = document.querySelector('.overcustom')\r\n        setNomeDaAtividadeDragged(cardBeingDragged.id)\r\n        setDropZoneQueVouUsar(dropzonequevouusar.id)\r\n        \r\n    }\r\n    function dragleave(){\r\n        \r\n        refDropZone.current.classList.remove('overcustom')\r\n            \r\n    }\r\n    function drop(){\r\n        refDropZone.current.classList.remove('overcustom')\r\n        console.log('DROP')\r\n    \r\n    }\r\n\r\n    function criarAtividadeNaDropZoneAtual (){\r\n        \r\n        \r\n        db.collection('grupos').doc(dropZoneQueVouUsar).collection('atividades').add({\r\n            atividadeNome: nomeDaAtividadeDragged,\r\n            data: Date.now()\r\n        })\r\n    }\r\n       \r\n    //const cardBeingDragged = document.querySelector('.is-dragging')\r\n    \r\n\r\n    return(\r\n        \r\n        \r\n        <main className=\"col-md-3 col-sm-4 col-xs-12 mb-3 mt-2 customshadow\">\r\n            <div id=\"overlay\"></div>\r\n            <div>\r\n                \r\n                    <Popup position='center' onOpen={on} onClose={off} modal ref={refDeletar}>\r\n                        \r\n                        <div className='col-12 p-1 bg-danger border border-dark rounded'>\r\n                            <h2 className='col-10 text-white text-center ml-4'>O que deseja?</h2>\r\n                            <button type=\"button\" className=\"btn btn-lg col-5 mr-5 ml-2\" onClick={deletarGrupo}>Excluir Grupo</button>\r\n                            <button type=\"button\" className=\"btn btn-lg col-5\"onClick={confirmarClose}>Fechar Popup</button>\r\n                        </div>\r\n                       \r\n                    </Popup>\r\n                \r\n               \r\n                {\r\n                    faseNome > 0 ?\r\n                <>\r\n                        <input  onBlur={mudarFaseNome0} onChange={(e) => setNome(e.target.value)} onKeyDown={(e) => handleKeyDown(e)} id=\"inputnome\" name=\"grupoNome\" placeholder={grupoNome} className=\"input py-2 col-12\" type=\"text\" autoFocus/>\r\n                </>\r\n                :\r\n                <>\r\n               \r\n                    \r\n                    \r\n                    <i onClick={confirmarCloseAbrir} className=\"fas fa-times-circle fa-2x icon-xzin\"></i>\r\n                    <button onClick={mudarFaseNome} type=\"button\" className=\"btn btn-lg nome-grupo\"><strong>{grupoNome}</strong></button>\r\n                    \r\n                   \r\n                \r\n        \r\n                </>\r\n                }\r\n                \r\n                <div class=\"card bg-custom dropzone\" id={id} ref={refDropZone} onDragEnter={dragenter} onDragOver={dragover} onDragLeave={dragleave}  onDrop={drop} >\r\n                    <ul class=\"list-group unordened\"  > \r\n                            {atividades.map((item, index) => <Atividades atualizarGrupo={atualizarGrupo} criarAtividadeNaDropZoneAtual={criarAtividadeNaDropZoneAtual} currentDropZone={currentDropZone} refDropZone={refDropZone} DropZoneAtual={DropZoneAtual} dropzones={dropzones} data={item} idGrupo={id} index={index} atividadeNome={item.atividadeNome} id={item.id} atualizarAtividades={mudarControleAtividades} on={on} off={off}/>)}\r\n                    </ul>\r\n                </div>\r\n                <button  onClick={openTooltip} id='button1' type=\"button\" className=\"btn btn-lg\">Novo Card <strong>+</strong></button>\r\n                \r\n                </div>\r\n                <Popup onClose={off} modal position='center' ref={ref}>\r\n                    <div className=' bg-info p-1 col-12 border border-dark rounded'>\r\n                        <h5 className='col-12 text-white'>Digite o nome da sua nova atividade</h5>\r\n                        <input  onKeyDown={(e) => atividadeEnter(e)} onChange={(e) => setAtividadeNome(e.target.value)} className=\"input py-1 col-8\" type=\"text\" autoFocus></input>\r\n                        <button type=\"button\" className=\"btn btn-sm col-3 ml-3\" onClick={criarAtividade}>Salvar</button>\r\n                    </div>\r\n                </Popup>\r\n                \r\n        </main>\r\n        \r\n       \r\n    )\r\n}\r\n\r\nexport default Card;\r\n\r\n\r\n","E:\\dev\\reminder-task-manager\\src\\components\\atividades\\index.js",["68","69"],"import React, { useRef } from 'react';\r\n\r\nimport { useState } from 'react';\r\nimport firebase from 'firebase';\r\nimport Popup from 'reactjs-popup';\r\nimport './atividades.css';\r\n\r\n\r\n\r\n\r\nfunction Atividades({atividadeNome , id, idGrupo, atualizarAtividades, on, off, DropZoneAtual, dropzones, criarAtividadeNaDropZoneAtual, atualizarGrupo}){\r\n    \r\n    \r\n    const refMeu = useRef();\r\n    \r\n    const refCard = useRef();\r\n    \r\n\r\n    \r\n    const [novoAtividadeNome, setNovoAtividadeNome] = useState('')\r\n    \r\n\r\n    const openTooltip = () => refMeu.current.open();\r\n    const closeTooltip = () => refMeu.current.close();\r\n    \r\n    function editarNomeAtividade(){\r\n\r\n        firebase.firestore().collection('grupos').doc(idGrupo).collection('atividades').doc(id).update({\r\n            atividadeNome : novoAtividadeNome\r\n        })\r\n\r\n    }\r\n\r\n    function excluirAtividade(){\r\n        firebase.firestore().collection('grupos').doc(idGrupo).collection('atividades').doc(id).delete()\r\n        closeTooltip()\r\n        setTimeout(() => {\r\n            atualizarAtividades()\r\n        }, 800);\r\n    }\r\n\r\n\r\n    function excluirOnDrag(){\r\n      firebase.firestore().collection('grupos').doc(idGrupo).collection('atividades').doc(id).delete()\r\n    }\r\n\r\n\r\n    function salvarAtividade(){\r\n        if (novoAtividadeNome != ''){\r\n            editarNomeAtividade()\r\n            setTimeout(() => {\r\n              atualizarAtividades()\r\n            }, 500);\r\n            closeTooltip()\r\n            setNovoAtividadeNome('')\r\n          }else{\r\n              closeTooltip()\r\n              setNovoAtividadeNome('')\r\n          }\r\n\r\n    }\r\n\r\n    \r\n\r\n    \r\n    \r\n    const atividadeEditarEnter = (event) => {\r\n        if (event.keyCode === 13) {\r\n          event.preventDefault();\r\n          if (novoAtividadeNome != ''){\r\n          editarNomeAtividade()\r\n          setTimeout(() => {\r\n            atualizarAtividades()\r\n          }, 500);\r\n          closeTooltip()\r\n          setNovoAtividadeNome('')\r\n        }else{\r\n            closeTooltip()\r\n            setNovoAtividadeNome('')\r\n        }\r\n          \r\n\r\n          \r\n        }\r\n      };\r\n\r\n      \r\n\r\n      \r\n      \r\n      function dragstart(){\r\n        dropzones.forEach( dropzone => dropzone.classList.add('highlight'))\r\n        refCard.current.classList.add('is-dragging')\r\n        excluirOnDrag()\r\n      }\r\n\r\n        function drag(){\r\n          \r\n        }\r\n        function dragend(){\r\n          \r\n          dropzones.forEach ( dropzone => dropzone.classList.remove('highlight'))\r\n          \r\n          refCard.current.classList.remove('is-dragging')\r\n          criarAtividadeNaDropZoneAtual()\r\n          atualizarGrupo()\r\n          \r\n          \r\n          \r\n          \r\n        \r\n        }\r\n\r\n        \r\n        \r\n\r\n    return(\r\n        \r\n       <>\r\n             <li  draggable='true' id={atividadeNome}  ref={refCard}  onDragStart={dragstart} onDrag={drag} onDragEnd={dragend} class=\"list-group-item font-weight-bold my-1 text-white customlist customcard\" onClick={openTooltip} >{atividadeNome}</li>\r\n\r\n            <Popup onOpen={on} onClose={off} modal ref={refMeu}>\r\n                <li class=\"list-group-item font-weight-bold my-1 border border-dark\">\r\n                    <h3>Editar atividade</h3>\r\n                    <input onKeyDown={(e) => atividadeEditarEnter(e)} onChange={(e) => setNovoAtividadeNome(e.target.value)} placeholder={atividadeNome} className=\"input py-1 col-6 mr-1\" type=\"text\" autoFocus></input>\r\n                    <button type=\"button\" onClick={salvarAtividade} className=\"btn btn-sm py-1 col-2 mr-1\" ><strong>Salvar</strong></button>\r\n                    <button type=\"button\" onClick={excluirAtividade} className=\"btn btn-sm py-1 col-2 mr-1\" ><strong>Excluir</strong></button>\r\n                    <button type=\"button\" onClick={closeTooltip} className=\"btn btn-sm py-1 col-1 px-1\" ><strong>x</strong></button>\r\n                    \r\n                </li>\r\n            </Popup>\r\n            \r\n           \r\n            \r\n            \r\n        </>\r\n        \r\n        \r\n    )\r\n}\r\n\r\nexport default Atividades;",{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":48,"column":8,"nodeType":"76","endLine":48,"endColumn":18,"suggestions":"77"},{"ruleId":"78","severity":1,"message":"79","line":58,"column":22,"nodeType":"80","messageId":"81","endLine":58,"endColumn":24},{"ruleId":"82","severity":1,"message":"83","line":1,"column":16,"nodeType":"84","messageId":"85","endLine":1,"endColumn":24},{"ruleId":"82","severity":1,"message":"86","line":5,"column":8,"nodeType":"84","messageId":"85","endLine":5,"endColumn":22},{"ruleId":"82","severity":1,"message":"87","line":10,"column":12,"nodeType":"84","messageId":"85","endLine":10,"endColumn":21},{"ruleId":"82","severity":1,"message":"88","line":27,"column":29,"nodeType":"84","messageId":"85","endLine":27,"endColumn":47},{"ruleId":"78","severity":1,"message":"79","line":42,"column":27,"nodeType":"80","messageId":"81","endLine":42,"endColumn":29},{"ruleId":"74","severity":1,"message":"89","line":76,"column":8,"nodeType":"76","endLine":76,"endColumn":57,"suggestions":"90"},{"ruleId":"82","severity":1,"message":"91","line":80,"column":14,"nodeType":"84","messageId":"85","endLine":80,"endColumn":23},{"ruleId":"78","severity":1,"message":"92","line":114,"column":19,"nodeType":"80","messageId":"81","endLine":114,"endColumn":21},{"ruleId":"78","severity":1,"message":"92","line":114,"column":33,"nodeType":"80","messageId":"81","endLine":114,"endColumn":35},{"ruleId":"78","severity":1,"message":"79","line":49,"column":31,"nodeType":"80","messageId":"81","endLine":49,"endColumn":33},{"ruleId":"78","severity":1,"message":"79","line":70,"column":33,"nodeType":"80","messageId":"81","endLine":70,"endColumn":35},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'listagrupos' and 'usuarioEmail'. Either include them or remove the dependency array.","ArrayExpression",["95"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'usuarioReducer' is defined but never used.","'faseBotao' is assigned a value but never used.","'setCurrentDropZone' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'id' and 'listaatividades'. Either include them or remove the dependency array.",["96"],"'mudarFase' is defined but never used.","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation",{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},"Update the dependencies array to be: [controle, listagrupos, usuarioEmail]",{"range":"101","text":"102"},"Update the dependencies array to be: [controleAtividades, controleAtividade, controle, id, listaatividades]",{"range":"103","text":"104"},[1402,1412],"[controle, listagrupos, usuarioEmail]",[2385,2434],"[controleAtividades, controleAtividade, controle, id, listaatividades]"]